const net = require('net');
const {Resp} = require('respjs')

class DiceDBClient {
    constructor({ host = '127.0.0.1', port = 7379 } = {}) {
        this.host = host;
        this.port = port;
        this.client = new net.Socket();
    }

    connect(callback) {
        return new Promise((resolve, reject) => {
            this.client.connect(this.port, this.host, () => {
                if(callback) callback();
                resolve();
            });

            this.client.on('error', (err) => {
                if (callback) {
                    callback(err); 
                }
                reject(err);
            });
        });
    }
    /**
     * @description Used to excute all command availbale in DiceDB.
     * @link https://dicedb.io/
     * @param {Array<String>} commandArray The array of arguments that represents the command to be executed.
     * The first element should be the command name (e.g., 'BFADD', 'BFINIT'), followed by any additional arguments.
     * @returns {Promise<any>} A Promise that resolves with the decoded response from the DiceDB server.
     * @throws Will throw an error if there is a problem sending the command or if the server returns an error.
    */
    sendCommand(commandArray) {
        return new Promise((resolve, reject) => {
            const commandInRESP = commandArray.map(arg => `$${arg.length}\r\n${arg}`).join('\r\n');
            const finalCommand = `*${commandArray.length}\r\n${commandInRESP}\r\n`;

            this.client.write(finalCommand, (err) => {
                if (err) {
                    return reject(err.message);
                }
            });

            this.client.once('data', (data) => {
                const response = Resp.decode(data);
                resolve(response);           
            });
        });
    }

    SET(key, value) {
        return this.sendCommand(['SET', key, value]);
    }

    GET(key) {
        return this.sendCommand(['GET', key]);
    }
    /**
     * @description Adds an item to a Bloom Filter.
     * @link https://dicedb.io/commands/bfadd/
     * @param {String} key The name of the Bloom Filter to which the item will be added.
     * @param {String} item The item to be added to the Bloom Filter.
     * @returns {Promise<Number>} Returns 1 if the item was not already present, and 0 if it was already present.
     * @throws Will throw an error if the key or item is missing or not a string.
     */
    BFADD(key, item){
        return this.sendCommand(['BFADD', key, item]);
    }
    /**
     * @description Checks an item in a Bloom Filter.
     * @link https://dicedb.io/commands/bfexists/
     * @param {String} key The key under which the Bloom Filter is stored.
     * @param {String} item  The item to check for existence in the Bloom Filter.
     * @returns returns 1 if the item may exist and 0 if the item definitely does not exist.
     */
    BFEXISTS(key, item){
        return this.sendCommand(['BFEXISTS', key, item]);
    }
}

module.exports = DiceDBClient;
